"""
Author: Bhavya papudeshi
Aim:A snakemake workflow that refines the MAGs as phage genomes 
	Method - reads the metabat2 bins and run viral_verify to prefict the "Virus" bins 
		selects the "Virus" sequences to a new file
		calculate the viral completensss of each bin

Run: snakemake  -s snakemake-phage-bins --cores all
Assembly - megahit
Assembly stats - quast 
Binning - metabat2, concoct 
Bin contribution
bin completeness - checkv
"""

import os
from os.path import join
import glob

#getting the read names
# In the future fix this so compressed formats are allowed as well and fasta formats
SAMPLES, =glob_wildcards("reads/{sample}_R1.fastq")
if len(SAMPLES) == 0:
	sys.stderr.write(f"We did not find any fastq files in {SAMPLES}. Is this the right read dir?\n")
	sys.exit(0)
print(f"Samples are {SAMPLES}")

#lists all the outputs generated by the workflow
rule all:
	input:
		"reads/left.fastq",
		"reads/right.fastq",
		"assembly/megahit-assembly/final.contigs.fa",
		"assembly/megahit-quast/report.tsv",
		"binning/megahit-bowtie2-index.1.bt2",
		expand("binning/{sample}.bam", sample=SAMPLES),
		expand ("binning/{sample}.sam", sample=SAMPLES),
		"binning/metabat_depth",
		"binning/metabat_bins/metabat_bins.1.fa",
		"binning/concoct_output/clustering_gt1000.csv",
		"binning/concoct_bins/1.fa",
		"contrib/metabat_bin_names.txt",
		"contrib/concoct_bin_names.txt",
		"contrib/sample_list.txt",
		"contrib/metabat_bins.1.fa-index.1.bt2",
		"contrib/metabat_mapping_done",
		"contrib/concoct_mapping_done",
		"contrib/bowtie2_alignment_rate.txt",
		"checkv/metabat_bins.1.fa_checkv/completeness.tsv"

rule concatenate:
	input:
		r1=expand("reads/{sample}_R1.fastq", sample=SAMPLES),
		r2=expand("reads/{sample}_R2.fastq", sample=SAMPLES)
	output:
		left="reads/left.fastq",
		right="reads/right.fastq"
	shell:
		"""
		cat {input.r1} >{output.left}
		cat {input.r2} >{output.right}
		"""
rule megahit:
	input:
		left="reads/left.fastq",
		right="reads/right.fastq"
	output:
		"assembly/megahit-assembly/final.contigs.fa",
		"assembly/megahit-assembly/log",
	params:
		odir="assembly/megahit-assembly"
	shell:
		"rmdir {params.odir}; megahit -1 {input.left} -2 {input.right} -o {params.odir} -t 16"

rule quast:
	input:
		"assembly/megahit-assembly/final.contigs.fa"
	params:
		odir="assembly/megahit-quast"
	output:
		"assembly/megahit-quast/report.tsv"
	shell:
		"quast.py {input} -o {params.odir}"

rule bowtie2Build:
	input:
		"assembly/megahit-assembly/final.contigs.fa"
	params:
		basename="binning/megahit-bowtie2-index"
	output:
		output1="binning/megahit-bowtie2-index.1.bt2",
		output2="binning/megahit-bowtie2-index.2.bt2",
		output3="binning/megahit-bowtie2-index.3.bt2",
		output4="binning/megahit-bowtie2-index.4.bt2",
		outputrev1="binning/megahit-bowtie2-index.rev.1.bt2",
		outputrev2="binning/megahit-bowtie2-index.rev.2.bt2"
	shell:
		"bowtie2-build {input} {params.basename}"

rule samfiles:
	input:
		un="binning/megahit-bowtie2-index.1.bt2",
		freads="reads/{sample}_R1.fastq",
		rreads="reads/{sample}_R2.fastq"
	output:
		reads_sam="binning/{sample}.sam"
	shell:
		"bowtie2 -x binning/megahit-bowtie2-index -1 {input.freads} -2 {input.rreads} -S {output.reads_sam} -p 16"

rule bamfiles:
	input:
		"binning/{sample}.sam"
	output:
		"binning/{sample}.bam"
	shell:
		"samtools view -bS {input} | samtools sort -o {output}"


rule metabat_contigs_depth:
	input:
		bam=expand("binning/{sample}.bam", sample=SAMPLES),
		contigs="assembly/megahit-assembly/final.contigs.fa"
	output:
		depth="binning/metabat_depth",
	run:
		shell("jgi_summarize_bam_contig_depths --outputDepth {output.depth} {input.bam}"),

rule metabat_bins:
	input:
		contigs="assembly/megahit-assembly/final.contigs.fa",
		depth="binning/metabat_depth"
	output:
		"binning/metabat_bins/metabat_bins.1.fa"
	params:
		basename="binning/metabat_bins/metabat_bins"
	shell:
		"""
		if [ -d "binning/metabat_bins" ]
		then
			metabat2 -i {input.contigs} -a {input.depth} -m 1500 -o {params.basename}
		else
			mkdir {params.basename}
			metabat2 -i {input.contigs} -a {input.depth} -m 1500 -o {params.basename}
		fi

		if [ -f {output}]
		then
			echo "metabat_bins directory not empty"
		else
			echo "no metabat bins generated"
			touch {output}
		fi
		"""

rule concoct:
	input:
		contigs= "assembly/megahit-assembly/final.contigs.fa",
		tsv="binning/metabat_depth"
	output:
		odir="binning/concoct_output/clustering_gt1000.csv"
	params:
		od="binning/concoct_output"
	shell:
		"""
		concoct --composition_file {input.contigs} --coverage_file {input.tsv} -b {params.od} -t 4
		"""

rule extract_concoct_bins:
	input:
		contigs="assembly/megahit-assembly/final.contigs.fa",
		odir="binning/concoct_output/clustering_gt1000.csv"
	output:
		"binning/concoct_bins/1.fa"
	params:
		base="binning/concoct_bins"
	shell:
		 """
		touch {output}
		extract_fasta_bins.py {input.contigs} {input.odir} --output_path {params.base}
		if [-f {output}]
		then
			echo "concoct_bins directory not empty"
		else
			echo "no concoct bins generated"
			touch {output}
                fi
		"""

rule list_metabat_bins:
	input:
		"binning/metabat_bins/metabat_bins.1.fa"
	output:
		"contrib/metabat_bin_names.txt"
	run:
		shell("if [-d 'contrib']; then  ls binning/metabat_bins/*.fa >{output}; else mkdir contrib; ls binning/metabat_bins/*.fa >{output}; fi"),
		shell("sed -i 's|binning/metabat_bins/||g' {output}")

rule list_conoct_bins:
	input:
		"binning/concoct_bins/1.fa"
	output:
		"contrib/concoct_bin_names.txt"
	run:
		shell("if [-d 'contrib']; then  ls binning/concoct_bins/*.fa >{output}; else mkdir contrib;ls binning/concoct_bins/*.fa >{output}; fi"),
		shell("sed -i 's|binning/concoct_bins/||g' {output}")

rule list_samples:
	input:
		chkpnt1="contrib/metabat_bin_names.txt",
		chkpnt2="contrib/concoct_bin_names.txt"
	output:
		"contrib/sample_list.txt"
	run:
		shell("ls reads/*R1.fastq > {output}"),
		shell("sed -i 's/_R1.fastq//g' {output}"),
		shell("sed -i 's|reads/||g' {output}")

rule bins_bowtie2_index:
	input:
		metabat="contrib/metabat_bin_names.txt",
		concoct="contrib/concoct_bin_names.txt"
	output:
		"contrib/metabat_bins.1.fa-index.1.bt2"
	run:
		shell("for f in `cat {input.metabat}`; do bowtie2-build binning/metabat_bins/$f contrib/$f-index; done"),
		shell("for f in `cat {input.concoct}`; do bowtie2-build binning/concoct_bins/$f contrib/$f-index; done")

rule metabat_bins_maps_reads:
	input:
		bin_list="contrib/metabat_bin_names.txt",
		sample_list="contrib/sample_list.txt",
		ind="contrib/metabat_bins.1.fa-index.1.bt2"
	output:
		"contrib/metabat_mapping_done"
	threads: 10 
	shell:
		"""
		for i in `cat {input.bin_list}`; do for f in `cat {input.sample_list}`; do bowtie2 -x contrib/"$i"-index -1 reads/"$f"_R1.fastq -2 reads/"$f"_R2.fastq -p {threads} -S contrib/"$f"_"$i".sam 2>contrib/"$f"_"$i".log; done ; done
		touch contrib/metabat_mapping_done
		"""

rule concoct_bins_map_reads:
	input:
		bin_list="contrib/concoct_bin_names.txt",
		sample_list="contrib/sample_list.txt",
		ind="contrib/1.fa-index.1.bt2"
	output:
		"contrib/concoct_mapping_done"
	threads: 10
	shell:
		"""
		for i in `cat {input.bin_list}`; do for f in `cat {input.sample_list}`; do bowtie2 -x contrib/"$i"-index -1 reads/"$f"_R1.fastq -2 reads/"$f"_R2.fastq -p {threads} -S contrib/"$f"_"$i".sam 2>contrib/"$f"_"$i".log; done ; done
		touch contrib/concoct_mapping_done
		"""

rule fomat_contrib:
	input:
		chkpnt1="contrib/metabat_mapping_done",
		chkpnt2="contrib/concoct_mapping_done"
	output:
		o="contrib/bowtie2_alignment_rate.txt",
		final="contrib/bowtie2_alignment_rate.tsv"
	run:
		shell("for f in contrib/*.log; do grep 'overall alignment rate' $f && echo $f; done >> {output.o}"),
		shell("sed -i 's/overall alignment rate//g' {output.o}"),
		shell("""xargs -n2 <{output.o} > {output.final}"""),
		shell("sed -i 's|contrib/||g' {output.final}"),
		shell("sed -i 's/_good_out_/ /g' {output.final}")

rule checkv_metabat:
	input:
		metabat="contrib/metabat_bin_names.txt",
	output:
		"checkv/metabat_bins.1.fa_checkv/completeness.tsv"
	threads: 10 
	shell:
		"""
		mkdir checkv
		set +e 
		export CHECKVDB=~/checkv-db-v1.0
		for f in `cat {input.metabat}`; do checkv completeness binning/metabat_bins/$f checkv/$f_checkv -t {threads}; done
		exitcode=$?
		if [[ ! -d {output} ]]
		then
			touch {output}
			exit 0
		fi
		"""
