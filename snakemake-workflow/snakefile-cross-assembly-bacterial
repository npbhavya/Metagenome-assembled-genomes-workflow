"""
Author: Bhavya papudeshi
Aim:A snakemake workflow to assemble metagenome-assembled genomes
Step 1 - add the reads to the directory reads/
	The script makes an assumption that that reads are paired end 
	the extension to the reads should be fastq , NOT fq or gz
	The filename for forward reads should follow the syntax {sample name}_R1.fastq
	and reverse reads should follow the syntax {sample name}_R2.fastq

Run: snakemake  -s snakemake-cross-assembly -p 
The script runs the steps

Assembly - megahit
Assembly stats - quast 
Binning - metabat2
Binning stats - checkm 
"""
import os
from os.path import join
import glob 

#getting the read names
# In the future fix this so compressed formats are allowed as well and fasta formats
SAMPLES, =glob_wildcards("reads/{sample}_R1.fastq")
if len(SAMPLES) == 0:
	sys.stderr.write(f"We did not find any fastq files in {SAMPLES}. Is this the right read dir?\n")
	sys.exit(0)

print(f"Samples are {SAMPLES}")

rule all:
	input:
		expand("reads/{sample}_prinseq.good_out_R1.fastq", sample=SAMPLES),
		expand("reads/{sample}_prinseq.good_out_R2.fastq", sample=SAMPLES),
		"reads/left.fastq",
		"reads/right.fastq",
		"assembly/megahit-assembly/final.contigs.fa",
		"assembly/megahit-quast",
		"binning/megahit-bowtie2-index.1.bt2",
		expand("binning/{sample}.bam", sample=SAMPLES),
		expand ("binning/{sample}.sam", sample=SAMPLES),
		"binning/checkm_summary"

rule prinseq:
	input:
		r1="reads/{sample}_R1_001.fastq",
		r2="reads/{sample}_R2_001.fastq"
	output:
		r1="reads/{sample}_prinseq.good_out_R1.fastq",
		r2="reads/{sample}_prinseq.good_out_R2.fastq"
	resources:
		mem_mb=20000,
		cpus=2
	params:
		o="reads/{sample}_prinseq"
	shell:
		"""
		prinseq++ -min_len 60 -min_qual_mean 25 -ns_max_n 1 -derep 1 \
			-out_format 0 -trim_tail_left 5 -trim_tail_right 5 \
			-ns_max_n 5  -trim_qual_type min -trim_qual_left 30 \
			-trim_qual_right 30 -trim_qual_window 10 \
			-threads {resources.cpus} \
			-out_good {output.r1} -out_good2 {output.r2} \
			-fastq {input.r1} -fastq2 {input.r2}; rm -rf *.fastq;
		"""

rule concat_reads:
	input:
		fr=expand('reads/{sample}_prinseq.good_out_R1.fastq', sample=SAMPLES),
		rr=expand('reads/{sample}_prinseq.good_out_R2.fastq', sample=SAMPLES)
	output:
		left="reads/left.fastq",
		right="reads/right.fastq"
	run:
		shell("cat {input.fr} >{output.left}"),
		shell("cat {input.rr} >{output.right}"),
		shell("mkdir assembly")
		shell("mkdir binning")

rule megahit:
	input:
		left="reads/left.fastq",
		right="reads/right.fastq"
	output:
		"assembly/megahit-assembly/final.contigs.fa",
		"assembly/megahit-assembly/log",
	params:
		odir="assembly/megahit-assembly"
	shell:
		"rmdir {params.odir}; megahit -1 {input.left} -2 {input.right} -o {params.odir} -t 16"

rule quast:
	input:
		"assembly/megahit-assembly/final.contigs.fa"
	params:
		odir="assembly/megahit-quast"
	output:
		"assembly/megahit-quast/report.tsv"
	shell:
		"quast.py {input} -o {params.odir}"

rule bowtie2Build:
	input:
		"assembly/megahit-assembly/final.contigs.fa"
	params:
		basename="binning/megahit-bowtie2-index"
	output:
		output1="binning/megahit-bowtie2-index.1.bt2",
		output2="binning/megahit-bowtie2-index.2.bt2",
		output3="binning/megahit-bowtie2-index.3.bt2",
		output4="binning/megahit-bowtie2-index.4.bt2",
		outputrev1="binning/megahit-bowtie2-index.rev.1.bt2",
		outputrev2="binning/megahit-bowtie2-index.rev.2.bt2"
	shell:
		"bowtie2-build {input} {params.basename}"

rule samfiles:
	input:
		un="binning/megahit-bowtie2-index.1.bt2",
		freads="reads/{sample}_prinseq.good_out_R1.fastq",
		rreads="reads/{sample}_prinseq.good_out_R2.fastq"
	output:
		reads_sam="binning/{sample}.sam"
	shell:
		"bowtie2 -x binning/megahit-bowtie2-index -1 {input.freads} -2 {input.rreads} -S {output.reads_sam} -p 16"

rule bamfiles:
	input:
		"binning/{sample}.sam"
	output:
		"binning/{sample}.bam"
	shell:
		"samtools view -bS {input} | samtools sort -o {output}"

rule metabat_contigs_depth:
	input:
		bam=expand("binning/{sample}.bam", sample=SAMPLES)
	output:
		"binning/metabat_depth"
	run:
		shell("jgi_summarize_bam_contig_depths --outputDepth {output} {input.bam}"),

rule metabat_bins:
	input:
		contigs="assembly/megahit-assembly/final.contigs.fa",
		depth="binning/metabat_depth"
	params:
		basename="binning/metabat_bins"
	run:
		shell("metabat2 -i {input.contigs} -a {input.depth} -m 1500 -o {params.basename}"),

rule checkm_tree:
	input:
		bins="binning/metabat_bins"
	output:
		"binning/checkm_summary"
	run:
		shell("checkm tree -r -x fa {input.bins} binning/checkm_tree"),
		shell("checkm tree_qa binning/checkm_tree -f binning/checkm_tree_qa"),
		shell("checkm lineage_set binning/checkm_tree binning/checkm_marker"),
		shell("checkm analyze binning/checkm_marker -x fa {input.bins} binning/checkm_analyze"),
		shell("checkm qa binning/checkm_marker binning/checkm_analyze > {output}")
